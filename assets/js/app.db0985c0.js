"use strict";(self.webpackChunkxiaomingblog=self.webpackChunkxiaomingblog||[]).push([[3524],{939:(i,s,a)=>{a.d(s,{B:()=>_});var n={};a.r(n),a.d(n,{default:()=>y});var e={};a.r(e);var t={};a.r(t);var l={};a.r(l),a.d(l,{default:()=>B});var h={};a.r(h);var k={};a.r(k),a.d(k,{default:()=>F});var p={};a.r(p),a.d(p,{default:()=>C});var r={};a.r(r);var d={};a.r(d);var g={};a.r(g),a.d(g,{default:()=>O});var c={};a.r(c),a.d(c,{default:()=>q});var o={};a.r(o),a.d(o,{default:()=>Q});var A=a(4392);const y={enhance:({app:i})=>{i.component("GitContributors",A.B)}},B=(0,a(4953).re)({enhance:({app:i})=>{}});var m=a(30),u=a(594),v=a(4143);const F={enhance:({app:i})=>{i.component("CodeTabs",u.S),i.component("Tabs",v.t)}};var b=a(6107),E=a(8195);const C={enhance:({app:i})=>{i.component("CodeDemo",b.A),i.component("MdDemo",E.A)}};var f=a(9610),D=a(6201),x=a(2603),j=a(7701),w=a(2673),T=a(8178),S=a(2861);const O={enhance:({app:i})=>{(0,j.L)("VPIcon")||i.component("VPIcon",i=>(0,T.h)(S.G,{type:"iconify",prefix:"fa6-solid:",...i}))},setup:()=>{(0,w.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var P=a(1548),V=a(4707),N=a(1914);a(9020);const q={enhance:({app:i})=>{(0,j.L)("Badge")||i.component("Badge",V.A),(0,j.L)("VPCard")||i.component("VPCard",N.A)},setup:()=>{},rootComponents:[]};var M=a(5571),L=a(4711),z=a(337),U=a(9638),I=a(6192),G=a(194),H=a(9904),J=a(1253),W=a(9683),$=a(340),R=(a(5941),a(3693));a(1814),a(9044),a(6643),a(6424),(0,J.M_)(i=>{const s=i.title,a=i.index??!0,n=i.icon;return a?{title:s,content:n?()=>[(0,T.h)((0,T.g2)("VPIcon"),{icon:n,sizing:"both"}),s]:null,order:i.order,index:i.index}:null});const Q={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await I.s.wait(),a(...i)),(0,G.i)(i),i.component("BloggerInfo",W.l),i.component("SocialMedias",W.k),i.component("GlobalEncrypt",R.J),i.component("LocalEncrypt",R.n)},setup:()=>{(0,G.s)(),(0,G.a)(),(0,$.su)()},layouts:{Layout:H.L,NotFound:H.N,Blog:W.B}},_=[n,e,t,l,h,m,k,p,r,d,f,D,x,g,P,c,M,L,z,U,o].map(i=>i.default).filter(Boolean)},1709:(i,s,a)=>{a.d(s,{l:()=>n});const n=JSON.parse('{"category":{"/":{"path":"/category/","map":{"TypeScript":{"path":"/category/typescript/","indexes":[0,1,2,3]},"前端技术":{"path":"/category/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/","indexes":[4]},"Vue3":{"path":"/category/vue3/","indexes":[1,2,3]},"Element-Plus":{"path":"/category/element-plus/","indexes":[1,2,3]},"js面试题":{"path":"/category/js%E9%9D%A2%E8%AF%95%E9%A2%98/","indexes":[5]},"vue3面试题":{"path":"/category/vue3%E9%9D%A2%E8%AF%95%E9%A2%98/","indexes":[6]},"Promise":{"path":"/category/promise/","indexes":[7]},"面试常问":{"path":"/category/%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/","indexes":[8]},"学习记录":{"path":"/category/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","indexes":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]}}}},"tag":{"/":{"path":"/tag/","map":{"vue2":{"path":"/tag/vue2/","indexes":[30,31]},"vue3":{"path":"/tag/vue3/","indexes":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32]},"Element-plus":{"path":"/tag/element-plus/","indexes":[19,32]},"vue-router":{"path":"/tag/vue-router/","indexes":[9,10,29,32]},"vuex":{"path":"/tag/vuex/","indexes":[32]},"pinia":{"path":"/tag/pinia/","indexes":[28,32]},"slot":{"path":"/tag/slot/","indexes":[11]},"plugin":{"path":"/tag/plugin/","indexes":[12,13]},"axios":{"path":"/tag/axios/","indexes":[14]},"alova":{"path":"/tag/alova/","indexes":[14]},"WebSocket":{"path":"/tag/websocket/","indexes":[15]},"beforeEach":{"path":"/tag/beforeeach/","indexes":[16]},"跨域":{"path":"/tag/%E8%B7%A8%E5%9F%9F/","indexes":[17]},"webpack":{"path":"/tag/webpack/","indexes":[18,20,22]},"vite":{"path":"/tag/vite/","indexes":[18]},"Element-ui":{"path":"/tag/element-ui/","indexes":[19]},"Echarts":{"path":"/tag/echarts/","indexes":[21]},"ref":{"path":"/tag/ref/","indexes":[23]},"reactive":{"path":"/tag/reactive/","indexes":[23]},"computed":{"path":"/tag/computed/","indexes":[23]},"script setup":{"path":"/tag/script-setup/","indexes":[24,25,26,27]}}}}}')},2878:(i,s,a)=>{a.d(s,{P:()=>n});const n={Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5eaade"/><path fill="#fff" d="M805.25 585.542c-15-48.188-32.25-88.688-58.781-154.97 4.125-174.093-68.25-314.905-234.938-314.905-168.562 0-239.344 143.625-234.844 314.906-26.625 66.375-43.78 106.594-58.78 154.969-31.876 102.656-21.563 145.125-13.688 146.062 16.875 2.063 65.718-77.25 65.718-77.25 0 45.938 23.625 105.844 74.813 149.063-24.75 7.593-80.344 28.03-67.125 50.437 10.688 18.094 183.938 11.531 233.906 5.906 49.969 5.625 223.219 12.188 233.906-5.906 13.22-22.312-42.468-42.844-67.125-50.437 51.188-43.313 74.813-103.22 74.813-149.063 0 0 48.844 79.313 65.719 77.25 7.969-1.031 18.281-43.5-13.594-146.062z"/></svg>'}},3781:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,8,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,4,1,2,3,30,31,32]}},"star":{"/":{"path":"/star/","indexes":[0]}},"timeline":{"/":{"path":"/timeline/","indexes":[8,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,0,4,1,2,3,30,31,32]}}}')},4776:(i,s,a)=>{a.d(s,{M:()=>n});const n=JSON.parse('["/demoOther/typescript.html","/demoOther/TS%E5%BA%94%E7%94%A8/1.html","/demoOther/TS%E5%BA%94%E7%94%A8/2.html","/demoOther/TS%E5%BA%94%E7%94%A8/3.html","/demojs/","/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/1.html","/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/2.html","/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/3.html","/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/4.html","/demojs/vue3/10.html","/demojs/vue3/11.html","/demojs/vue3/12.html","/demojs/vue3/13.html","/demojs/vue3/14.html","/demojs/vue3/15.html","/demojs/vue3/16.html","/demojs/vue3/17.html","/demojs/vue3/18.html","/demojs/vue3/19.html","/demojs/vue3/2.html","/demojs/vue3/20.html","/demojs/vue3/21.html","/demojs/vue3/22.html","/demojs/vue3/3.html","/demojs/vue3/4.html","/demojs/vue3/5.html","/demojs/vue3/6.html","/demojs/vue3/7.html","/demojs/vue3/8.html","/demojs/vue3/9.html","/demojs/vue2/1.html","/demojs/vue2/2.html","/demojs/vue3/1.html","/intro.html"]')},4923:(i,s,a)=>{},6653:(i,s,a)=>{a.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/intro.html":{"tokens":["$2b$10$QYZUaxyrPslt9lxTe42ckeGU4/9oQKOSS/lGCo7WjCZB3aL82c7Ju"],"hint":"个人介绍页面已加密,请联系博主！"}}},"author":{"name":"Mr.Ming","url":"https://kem1s.github.io/blog/"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"https://github.com/Kem1s/blog","docsDir":"src","footer":"小铭的blog","displayFooter":true,"blog":{"description":"一个前端开发者","intro":"/intro.html","medias":{"Gitee":"https://gitee.com/ming-723","Email":"1130527725@qq.com","QQ":"1130527725"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/","/demojs/",{"text":"其他","icon":"book","prefix":"/demoOther/","children":["typescript",{"text":"ts应用","prefix":"TS应用/","children":["1","2","3"]},{"text":"面试题相关","prefix":"待整理/","children":["1","2","3","4"]}]}],"sidebar":{"/":["",{"text":"前端相关","icon":"book","prefix":"demojs/","link":"demojs/","children":"structure"},{"text":"其他","icon":"book","prefix":"demoOther/","children":"structure"},"intro"]}}}}')},8123:(i,s,a)=>{a.d(s,{v:()=>n});const n={"/demojs/":[{text:"Vue2",prefix:"vue2/",collapsible:!0,children:["1","2"]},{text:"Vue3",prefix:"vue3/",collapsible:!0,children:["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22"]}],"/demoOther/":[{text:"TS应用",prefix:"TS应用/",collapsible:!0,children:["3","2","1"]},"typescript",{text:"待整理",prefix:"待整理/",collapsible:!0,children:["1","2","3","4"]}]}},8164:(i,s,a)=>{a.d(s,{J:()=>e,c:()=>n});const n=JSON.parse("{}"),e=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,1440)),meta:{title:"博客主页",icon:"house"}}],["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,6458)),meta:{date:1752578491e3,cover:"/assets/images/cover3.jpg",isEncrypted:!0,readingTime:{minutes:1.63,words:488},title:"介绍页",icon:"circle-info",type:"article"}}],["/demoOther/typescript.html",{loader:()=>a.e(9415).then(a.bind(a,4194)),meta:{date:1752578491e3,category:["TypeScript"],sticky:!0,excerpt:"\x3c!--\nicon: pen-to-square  // 标题前的图标\ndate: 2022-01-12     // 文档的时间\ncategory:            // 分类\n  - 类型1\n  - 类型2\ntag:                 // 标签\n  - 哈哈\n  - 呵呵\nstar: true           // 未知\nsticky: true         // 未知\n --\x3e\n<h1>TypeScript 笔记</h1>\n<h3>1.类型约束</h3>\n<ul>\n<li><strong>类型推断</strong>（不建议使用）\n<blockquote>\n<p>TypeScript 自动会根据赋值类型，推断出变量的类型，如果赋值的不是推断的类型会报错。</p>\n</blockquote>\n</li>\n</ul>",readingTime:{minutes:8.69,words:2607},title:"TypeScript 笔记",icon:"pen-to-square",type:"article"}}],["/demojs/",{loader:()=>a.e(3155).then(a.bind(a,2183)),meta:{date:1752578491e3,category:["前端技术"],excerpt:"\x3c!-- 目录 --\x3e\n",readingTime:{minutes:.06,words:19},title:"前端技术",icon:"laptop-code",type:"article"}}],["/demoOther/TS%E5%BA%94%E7%94%A8/1.html",{loader:()=>a.e(1217).then(a.bind(a,758)),meta:{date:1752578491e3,category:["TypeScript","Vue3","Element-Plus"],excerpt:'\n<blockquote>\n<p>需安装 18.3 或更高版本的 Node.js。我的 Node 版本 22.16.0</p>\n</blockquote>\n<h3>1.项目初始化</h3>\n<ul>\n<li><strong>创建项目</strong></li>\n</ul>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vue@latest</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:1.32,words:395},title:"创建 vue+TS+vite 项目",type:"article"}}],["/demoOther/TS%E5%BA%94%E7%94%A8/2.html",{loader:()=>a.e(5420).then(a.bind(a,5329)),meta:{date:1752578491e3,category:["TypeScript","Vue3","Element-Plus"],excerpt:'\n<h3>项目根目录结构</h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>vue3TsDemo</span></span>\n<span class="line"><span>├── .vscode/                  # VS Code 编辑器配置</span></span>\n<span class="line"><span>├───|   settings.json        # VS Code 工作区设置文件，用于配置编辑器行为、插件设置等</span></span>\n<span class="line"><span>│   └── extensions.json      # 推荐的 VS Code 扩展</span></span>\n<span class="line"><span>├── .gitattributes           # Git 属性配置文件，用于设置文件的行尾、文件对比、合并策略等</span></span>\n<span class="line"><span>├── .gitignore               # Git 忽略文件配置</span></span>\n<span class="line"><span>├── README.md                # 项目说明文档</span></span>\n<span class="line"><span>├── components.d.ts         # 组件的类型声明文件（自动生成）</span></span>\n<span class="line"><span>├── auto-imports.d.ts       # 自动导入的类型声明文件（自动生成）</span></span>\n<span class="line"><span>├── env.d.ts                 # 环境变量的 TypeScript 类型声明</span></span>\n<span class="line"><span>├── package.json             # 项目依赖和脚本配置</span></span>\n<span class="line"><span>├──.prettierrc.json         # 代码美化设置</span></span>\n<span class="line"><span>├── tsconfig.json           # TypeScript 主配置文件</span></span>\n<span class="line"><span>├── tsconfig.app.json       # 应用程序的 TypeScript 配置</span></span>\n<span class="line"><span>├── tsconfig.node.json      # Node.js 相关的 TypeScript 配置</span></span>\n<span class="line"><span>├── vite.config.ts          # Vite 构建工具配置文件</span></span>\n<span class="line"><span>└── yarn.lock               # Yarn 依赖版本锁定文件</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.18,words:955},title:"vue3+ts 项目文件说明",type:"article"}}],["/demoOther/TS%E5%BA%94%E7%94%A8/3.html",{loader:()=>a.e(1331).then(a.bind(a,2522)),meta:{date:1752578491e3,category:["TypeScript","Vue3","Element-Plus"],excerpt:'\n<blockquote>\n<p>主要是 props 和 emit 在 vue3TS script setup 中写法种类比较多，特别是 props，如果要定义默认值，还需要用到 withDefaults 函数。</p>\n</blockquote>\n<h4>1.props</h4>\n<ul>\n<li><strong>vue2 语法</strong> (无法做类型约束，只能控制是否必传)</li>\n</ul>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    props</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">            type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">            default</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        },</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        user</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">            type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">            required</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            default</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">                    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "张三"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">                    age</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">                    sex</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "男"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">                    hobby</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"篮球"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"足球"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">],</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.32,words:397},title:"vue3 组件内 TS 约束",type:"article"}}],["/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/1.html",{loader:()=>a.e(3659).then(a.bind(a,5374)),meta:{date:1752587769e3,category:["js面试题"],excerpt:'\n<h3>1、说说你对 JavaScript 作用域的理解</h3>\n<p>作用域就是变量可访问的范围，有全局作用域、块级作用域、函数作用域。<br>\n<strong>全局作用域</strong>声明的变量，在全局范围内都可以访问。</p>\n<p><strong>块级作用域</strong>，只在代码块内能访问（但是如果是 var 声明的，可能会泄露，有变量提升）。</p>\n<p><strong>函数作用域</strong>，指函数内声明的变量，只能在函数内部访问。（如果需要在函数外部访问，则需要通过闭包实现）</p>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> global</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 123</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "你好"</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 全局变量，全局作用域内都可以访问，包括函数内和代码块内</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 456</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 无变量提升，只能在if代码块能访问</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 789</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // a2是var声明，有变量提升，所以函数内能访问，但是函数外无法访问</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">a2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 123, 你好, 789</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 123</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:30.1,words:9030},title:"js 面试题",order:1,type:"article"}}],["/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/2.html",{loader:()=>a.e(3730).then(a.bind(a,8277)),meta:{date:1752587769e3,category:["vue3面试题"],excerpt:"\n<h3>1、Vue3 的 Composition Api 和 Vue2 的 Options Api 有什么区别？</h3>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Vue2</th>\n<th>Vue3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><strong>Composition Api（组合式）</strong></td>\n<td><strong>Options Api（选项式）</strong></td>\n</tr>\n<tr>\n<td><strong>逻辑组织</strong></td>\n<td>自由度更高，数据和方法可以整合到一起，不用在<code>data</code>、<code>methods</code>之间来回切换</td>\n<td>自由度更差，逻辑太分散，大型组件修改起来困难</td>\n</tr>\n<tr>\n<td><strong>TS 支持度</strong></td>\n<td>完全支持</td>\n<td>支持有限</td>\n</tr>\n<tr>\n<td><strong>响应式数据</strong></td>\n<td>通过<code>Object.defineProperty</code>，无法检测对象属性增减或数组索引变化</td>\n<td>通过<code>Proxy</code> 代理，支持更全面的响应式操作</td>\n</tr>\n<tr>\n<td><strong>逻辑复用</strong></td>\n<td>需要用 minxs,存在命名冲突、来源不透明等问题</td>\n<td>通过自定义组合函数封装，不存在命名冲突</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:3.87,words:1161},title:"vue3 面试题",order:2,type:"article"}}],["/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/3.html",{loader:()=>a.e(9865).then(a.bind(a,3438)),meta:{date:1752587769e3,category:["Promise"],excerpt:'\n<h3>1、基础版 Promise</h3>\n<ul>\n<li><strong>例子</strong>：</li>\n</ul>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // throw new Error("error")</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 不会执行，因为Promise的状态只能修改一次</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.53,words:1660},title:"手写 Promise",order:3,type:"article"}}],["/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/4.html",{loader:()=>a.e(4600).then(a.bind(a,1196)),meta:{date:1752735525e3,category:["面试常问"],excerpt:"\n<h3>1.vue2 的双向绑定和 vue3 的双向绑定有什么区别</h3>\n<p>vue2 是通过 Object.defineProperty 实现的，vue3 是通过 Proxy 实现的;<br>\ndefineProperty 是 Object 的方法,监听对象时,需要通过遍历对象<strong>已有的属性</strong>,对每一个属性进行劫持,通过 getter/setter 来实现数据的劫持,当数据发生变化时,会触发 getter/setter,从而通知视图更新;这也导致以下几个问题:</p>\n<ol>\n<li>无法监听对象新增/删除属性</li>\n<li>遍历对象属性时,如果属性值是对象,需要递归遍历,性能较低</li>\n<li>通过对象方法操作数组时,无法监听到数组的变化(vue 重新了数组几个方法,稍微弥补了这个问题)</li>\n</ol>",readingTime:{minutes:14.46,words:4337},title:"面试常问",order:4,type:"article"}}],["/demojs/vue2/1.html",{loader:()=>a.e(6813).then(a.bind(a,7809)),meta:{date:1752578491e3,category:["学习记录"],tag:["vue2"],excerpt:"<h3>input 输入正整数</h3>\n\n",readingTime:{minutes:.41,words:123},title:"1. vue2演示",order:1,type:"article"}}],["/demojs/vue2/2.html",{loader:()=>a.e(7736).then(a.bind(a,9023)),meta:{date:1752578491e3,category:["学习记录"],tag:["vue2"],excerpt:"<h3>input 输入正整数</h3>\n\n",readingTime:{minutes:.41,words:123},title:"2. vue2演示",order:2,type:"article"}}],["/demojs/vue3/1.html",{loader:()=>a.e(3406).then(a.bind(a,4494)),meta:{date:1752578491e3,category:["学习记录"],tag:["vue3","Element-plus","vue-router","vuex","pinia"],excerpt:'\n<h2>1. 项目初始化</h2>\n<h3>1.1 安装脚手架</h3>\n\n<h2>2. 应用创建</h2>\n<h3>2.1 Vue 3 创建应用</h3>\n<p>Vue 3 使用 <code>createApp</code> 函数创建应用实例(脚手架自动生成)：</p>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// main.js</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "vue"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> App</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "./App.vue"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 创建应用实例</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 挂载应用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"#app"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.41,words:723},title:"项目创建与配置指南",order:1,type:"article"}}],["/demojs/vue3/10.html",{loader:()=>a.e(80).then(a.bind(a,2545)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","vue-router"],excerpt:"\n<p>路由守卫就是在进入某个组件、或退出某个组件时，根据业务需求看是否需要中断跳转。比如在进入其他页面前，判断用户是否登录，如果没登录就中断跳转，提示用户未登录，也可以强制跳转到登录页。</p>\n<p>路由守卫根据场景分为三大类：</p>\n<ol>\n<li><strong>全局路由守卫</strong> 所有路由都会进入这个守卫</li>\n<li><strong>路由独享守卫</strong> 某个路由单独的守卫</li>\n<li><strong>组件路由守卫</strong> 某个组件内的路由守卫</li>\n</ol>\n<h3>10.1.1 全局路由守卫</h3>\n<h4>router.beforeEach 全局前置守卫</h4>",readingTime:{minutes:3.08,words:925},title:"路由守卫",order:10,type:"article"}}],["/demojs/vue3/11.html",{loader:()=>a.e(2551).then(a.bind(a,2540)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","vue-router"],excerpt:"\n<h2>11.1 实现思路</h2>\n<h3>场景分析</h3>\n<ol>\n<li>后台系统常见的权限控制需求：\n<ul>\n<li>不同角色看到不同的菜单</li>\n<li>未授权页面无法访问</li>\n<li>路由和菜单要同步</li>\n<li>权限要支持动态更新</li>\n</ul>\n</li>\n</ol>\n<h3>实现思路</h3>\n<ol>\n<li>\n<p><strong>路由分类</strong>：</p>\n<ul>\n<li>常量路由：登录、404 等公共页面</li>\n<li>动态路由：需要权限控制的页面</li>\n<li>错误路由：404、403 等错误页面</li>\n</ul>\n</li>\n<li>\n<p><strong>权限控制流程</strong>：</p>\n<ul>\n<li>用户登录 → 获取权限信息</li>\n<li>根据权限过滤路由 → 动态添加路由</li>\n<li>生成菜单 → 渲染界面</li>\n<li>路由守卫拦截无权限访问</li>\n</ul>\n</li>\n</ol>",readingTime:{minutes:3.9,words:1171},title:"动态路由",order:11,type:"article"}}],["/demojs/vue3/12.html",{loader:()=>a.e(1550).then(a.bind(a,2711)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","slot"],excerpt:"\n<blockquote>\n<p>插槽是指在封装组件时，为不确定的 dom 结构 或者 需要用户自定义的 dom 结构提供一个插槽。用户在父组件使用这个封装的组件时，可以在插槽里根据需求放对应的 dom。<br>\n插槽透传见我的 vue3demo 项目代码</p>\n</blockquote>\n<p>插槽分为 3 种：</p>\n<ol>\n<li>\n<p><strong>默认插槽</strong> 不需要命名的插槽，用于接收未命名的内容。</p>\n</li>\n<li>\n<p><strong>具名插槽</strong> 可以被命名的插槽，用于接收特定名称的内容。插槽名称 <strong><mark>name</mark></strong> 属性指定</p>\n</li>\n<li>\n<p><strong>作用域插槽</strong> 一种特殊的插槽，其数据来源于定义插槽的父组件。一般常见的 UI 框架用的特别多</p>\n</li>\n</ol>",readingTime:{minutes:2.5,words:751},title:"插槽",order:12,type:"article"}}],["/demojs/vue3/13.html",{loader:()=>a.e(4949).then(a.bind(a,7607)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","plugin"],excerpt:'\n<p>Vue 3 中，全局插件 都通过 <code>app</code> 实例进行调用，这种方式更加明确且不容易污染全局环境。</p>\n<h2>13.1 app.component() - 注册全局组件</h2>\n<blockquote>\n<p>全局组件可以在任意组件中使用，无需单独导入。</p>\n</blockquote>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// main.js</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "vue"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> App</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "./App.vue"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> MyButton</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "./components/MyButton.vue"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 1. 直接注册</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"MyButton"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">MyButton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 2. 批量注册</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./components/*.vue"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\.\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">components</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">vue)/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"#app"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.95,words:1186},title:"插件（plugin）",order:13,type:"article"}}],["/demojs/vue3/14.html",{loader:()=>a.e(236).then(a.bind(a,2716)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","plugin"],excerpt:"\n<blockquote>\n<p>递归组件是一种自我调用的组件形式，常用于处理树形结构数据，如：</p>\n<ul>\n<li>树形菜单</li>\n<li>多级评论</li>\n<li>组织架构图</li>\n<li>文件夹结构</li>\n<li>多级表头</li>\n</ul>\n</blockquote>\n<h2>14.1 Vue 2 递归组件</h2>\n<p>在 Vue 2 中实现递归组件需要注意两个关键点：</p>\n<ol>\n<li><strong>必须设置 name 属性</strong>：用于组件自我引用</li>\n<li><strong>必须有结束条件</strong>：防止无限递归导致栈溢出</li>\n</ol>",readingTime:{minutes:1.82,words:547},title:"递归组件",order:14,type:"article"}}],["/demojs/vue3/15.html",{loader:()=>a.e(2771).then(a.bind(a,8156)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","axios","alova"],excerpt:'<blockquote>\n<p>可以理解为对 ajax 的全局配置，相当于 vue 路由的全局前置守卫和后置守卫。</p>\n<p>全局配置 api 请求地址，可以根据开发环境和生产环境配置对应的 api 接口地址，参考<a href="https://zhuanlan.zhihu.com/p/680381468" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/680381468</a>；或<a href="https://blog.csdn.net/zx15271563333/article/details/135499701" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zx15271563333/article/details/135499701</a></p>\n<p>request 请求拦截器，对所有接口调用前进行设置，比如用户 token，或者对上传接口等特殊接口单独配置特别的请求头；</p>\n<p>response 响应拦截器 ， 对所有接口的响应状态拦截，看是否未登录或者其他权限问题。</p>\n</blockquote>',readingTime:{minutes:7.59,words:2276},title:"alova/axios请求封装",order:15,type:"article"}}],["/demojs/vue3/16.html",{loader:()=>a.e(1562).then(a.bind(a,7559)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","WebSocket"],excerpt:'\n<h2>16.1 基础知识</h2>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>实际项目可以使用 <a href="http://socket.io" target="_blank" rel="noopener noreferrer">socket.io</a>,或者三方库,考虑的更周到,兼容性更好<br>\nWebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。在 Vue3 项目中封装 WebSocket 需要考虑以下几个关键点：</p>\n</div>\n<ol>\n<li><strong>心跳检测</strong>: 定期发送心跳包，检测连接状态,避免掉线</li>\n<li><strong>断线重连</strong>: 连接断开时自动重新连接</li>\n<li><strong>消息处理</strong>: 统一的消息发送和接收处理</li>\n<li><strong>状态管理</strong>: 使用 Pinia 管理 WebSocket 状态</li>\n<li><strong>错误处理</strong>: 完善的错误处理机制</li>\n</ol>',readingTime:{minutes:4.06,words:1219},title:"WebSocket 封装",order:16,type:"article"}}],["/demojs/vue3/17.html",{loader:()=>a.e(3569).then(a.bind(a,2159)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","beforeEach"],excerpt:'\n<h2>17.1 前置守卫的作用</h2>\n<p>前置守卫主要用于以下场景：</p>\n<ol>\n<li>登录状态验证</li>\n<li>权限控制</li>\n<li>页面访问控制</li>\n<li>数据预加载</li>\n<li>页面切换动画</li>\n</ol>\n<h2>17.2 前置守卫实现</h2>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> router</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "./router"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> store</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "./store"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "element-ui"</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // UI框架的消息提示组件</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> NProgress</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "nprogress"</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 页面加载进度条</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "nprogress/nprogress.css"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 进度条配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    showSpinner</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 是否显示加载微调器</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    minimum</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 最小百分比</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 免登录白名单</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> whiteList</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    "/login"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 登录页</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    "/register"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 注册页</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    "/404"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 404页面</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    "/reset"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 重置密码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * 全局前置守卫</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic"> {Object}</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> to</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> - 要进入的目标路由对象</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic"> {Object}</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> from</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> - 当前导航正要离开的路由对象</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic"> {Function}</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> next</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> - 必须调用该方法来 resolve 这个钩子</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">beforeEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 开启进度条</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 设置页面标题</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "默认标题"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 获取token</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> hasToken</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">token</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 第一步：判断是否有token</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">hasToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 1.1 有token的情况</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">whiteList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">includes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            // 已登录状态下访问登录页面，重定向到首页</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "/"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">            NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            // 1.2 判断是否有用户信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> hasUserInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">userInfo</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">hasUserInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 有用户信息，直接放行</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 没有用户信息，尝试获取用户信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                    await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"GetUserInfo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 获取用户的权限路由</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> accessRoutes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"GenerateRoutes"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 动态添加路由</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">                    accessRoutes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">route</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">                        router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addRoute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">route</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 放行，确保addRoute完成</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                    next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({ </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">replace</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 获取用户信息失败，可能是token过期</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                    await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Logout"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">                    Message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "获取用户信息失败，请重新登录"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                    next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`/login?redirect=</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">${</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">to</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">                    NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 第二步：没有token的情况</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">whiteList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">includes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            // 在免登录白名单中，直接进入</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            // 其他没有访问权限的页面将重定向到登录页面</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`/login?redirect=</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">${</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">to</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">            NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * 全局后置钩子</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">afterEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 关闭进度条</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * 路由错误处理</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">onError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"路由错误:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    NProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.74,words:522},title:"前置守卫",order:17,type:"article"}}],["/demojs/vue3/18.html",{loader:()=>a.e(6936).then(a.bind(a,5009)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","跨域"],excerpt:'\n<h2>18.1 基础概念</h2>\n<h3>1. 什么是跨域</h3>\n<p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这个请求会受到同源策略的限制，导致请求失败。</p>\n<h3>2. 同源策略</h3>\n<p>同源策略是一种安全协议，它要求"协议+域名+端口"三者相同。以下情况都属于跨域：</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当前页面 url: http://www.example.com/index.html</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 以下都是跨域：</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">http://www.another.com/index.html</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       # 不同域名</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">http://www.example.com:8080/index.html</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 不同端口</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">https://www.example.com/index.html</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 不同协议</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.73,words:819},title:"跨域",order:18,type:"article"}}],["/demojs/vue3/19.html",{loader:()=>a.e(8127).then(a.bind(a,280)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","webpack","vite"],excerpt:'\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>首屏优化案例<br>\n<strong>1.</strong> Ehcarts 打包优化,采用<strong>异步加载</strong>的方案，较<strong>按需加载</strong>减少 619kb,较<strong>全量引入</strong>减少 1094kb。具体代码参考第 20 章，Echarts 的使用。<br>\n<strong>2.</strong> element-plus 优化，采用<strong>按需引入</strong>加<strong>webpack 分包</strong>的方式，体积从 260 多 kb 减少到 70 多 kb。具体代码见第 2 章,element-ui 的使用。<br>\n<strong>3.</strong> webpack 可以安装<code>webpack-bundle-analyzer</code>进行打包分析,vite 可以使用<code>rollup-plugin-visualizer</code>进行打包分析。</p>\n</div>',readingTime:{minutes:5.85,words:1754},title:"webpack或vite常用配置",order:19,type:"article"}}],["/demojs/vue3/2.html",{loader:()=>a.e(8135).then(a.bind(a,775)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","Element-plus","Element-ui"],excerpt:"\n<h2>1. 样式配置</h2>\n<h3>1.1 使用 SASS</h3>\n<blockquote>\n<p><strong>环境要求</strong>：请根据 Node.js 版本选择合适的 sass-loader 版本</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Node.js 版本</th>\n<th>推荐安装版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 14.x</td>\n<td>sass-loader@10.2.1</td>\n</tr>\n<tr>\n<td>Node 18.x</td>\n<td>sass-loader@13.3.2 + sass@1.69.0</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:4.55,words:1365},title:"项目开发指南",order:2,type:"article"}}],["/demojs/vue3/20.html",{loader:()=>a.e(803).then(a.bind(a,6278)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","webpack"],excerpt:'\n<h3>案例 1：不打包无用 vue 文件</h3>\n<ul>\n<li><strong>场景</strong>：假设有 100 套皮肤，也就是 100 个 header 文件，需要根据当前皮肤加载对应的 header 文件。如果按照下面的代码，100 个文件全部会被打包到一个 js 文件，特别大。那么如何实现只打包 1 个 js 文件呢？</li>\n</ul>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">component</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF"> :is="vHeader"&gt;&lt;/component&gt;</span></span>\n<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF">&lt;template/&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">export</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        return {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">            vHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">$store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">theme</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 假设主题从vuex获取</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    created</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        this.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">vHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`@/components/Header</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">theme</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">.vue`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:1.58,words:475},title:"webpack优化案例",order:20,type:"article"}}],["/demojs/vue3/21.html",{loader:()=>a.e(2220).then(a.bind(a,7838)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","Echarts"],excerpt:'\n<p>本文主要介绍 Echarts 的基本使用和封装，以及从首屏优化的角度，优化打包体积(毕竟 Echarts 太大了 1M 多)。webpack 项目可以安装<code>webpack-bundle-analyzer</code>，每次<code>npm run build</code>后自动显示每个 js 文件的依赖情况和每个文件的体积大小，方便针对性优化。</p>\n<ul>\n<li><strong>安装 webpack-bundle-analyzer</strong></li>\n</ul>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> webpack-bundle-analyzer</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 或</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> webpack-bundle-analyzer</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:6.89,words:2067},title:"使用 Echarts",order:21,type:"article"}}],["/demojs/vue3/22.html",{loader:()=>a.e(7665).then(a.bind(a,1532)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","webpack"],excerpt:'\n<h3>22.1 魔法注释（Magic Comments）</h3>\n<ul>\n<li><strong>作用</strong>：webpack 自带，分割 js、优化页面加载速度</li>\n</ul>\n<p>在 Webpack 中，魔法注释（Magic Comments）主要用于动态导入（import()）时控制代码分割行为。它既可以生成单独的文件，又可以控制是否立即加载。对于有些组件中引入 js 库或组件，不太重要的我们可以设置空闲时加载，提高页面性能。</p>\n<h4>参数说明</h4>\n<ul>\n<li>\n<p><strong>webpackChunkName</strong>: "chunkName"</p>\n<ul>\n<li>指定生成的 chunk 名称</li>\n<li>输出文件格式为: chunkName.[contenthash].js</li>\n<li>示例：webpackChunkName: "myText" → myText.123abc.js</li>\n</ul>\n</li>\n<li>\n<p><strong>webpackMode</strong>: 控制模块的加载模式</p>\n<ul>\n<li>"lazy"（默认）：异步加载，生成单独的 chunk</li>\n<li>"eager"：不会生成额外的 chunk，代码会被内联到当前 chunk 中</li>\n<li>"weak"：尝试加载模块，如果模块已经被加载则返回其 Promise，否则返回 null</li>\n<li>"lazy-once"：生成一个可以满足所有 importer 的单独 chunk</li>\n</ul>\n</li>\n<li>\n<p><strong>webpackPrefetch</strong>: true</p>\n<ul>\n<li>预获取，浏览器在<strong>空闲时</strong>加载未来可能需要的资源</li>\n<li>会在页面加载完成后，利用空闲时间下载</li>\n<li>适用于优先级较低的资源</li>\n<li>在网络空闲时才会加载</li>\n</ul>\n</li>\n<li>\n<p><strong>webpackPreload</strong>: true</p>\n<ul>\n<li>预加载，浏览器<strong>优先</strong>加载未来可能需要的资源</li>\n<li>与父 chunk 并行加载</li>\n<li>适用于优先级较高的资源</li>\n<li>立即开始加载</li>\n</ul>\n</li>\n</ul>',readingTime:{minutes:5.23,words:1568},title:"webpack 优化相关",order:22,type:"article"}}],["/demojs/vue3/3.html",{loader:()=>a.e(5040).then(a.bind(a,7900)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","ref","reactive","computed"],excerpt:"\n<h2>1. 响应式数据的三种方式</h2>\n<p>Vue 3 提供了三种主要的响应式数据创建方式，每种都有其特定的使用场景：</p>\n<h3>1.1 响应式数据对比</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>ref</th>\n<th>reactive</th>\n<th>computed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>适用数据类型</td>\n<td>基本数据类型（推荐）<br>引用类型（可用）</td>\n<td>引用类型（推荐）<br>基本类型（不推荐）</td>\n<td>基于其他响应式数据的派生值</td>\n</tr>\n<tr>\n<td>访问方式</td>\n<td>setup 中需要.value<br>模板中直接使用</td>\n<td>直接访问属性</td>\n<td>setup 中需要.value<br>模板中直接使用</td>\n</tr>\n<tr>\n<td>解构行为</td>\n<td>保持响应性</td>\n<td>失去响应性（需要配合 toRefs 使用）</td>\n<td>保持响应性</td>\n</tr>\n<tr>\n<td>使用场景</td>\n<td>单一值的响应式<br>如：计数器、开关状态</td>\n<td>复杂对象的响应式<br>如：表单数据、用户信息</td>\n<td>需要依赖其他数据计算的值<br>如：筛选、统计</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:4.39,words:1316},title:"响应式数据详解",order:3,type:"article"}}],["/demojs/vue3/4.html",{loader:()=>a.e(1409).then(a.bind(a,930)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","script setup"],excerpt:"\n<h2>4. vue3 script setup 写法</h2>\n<blockquote>\n<p>script setup 是 Vue 4.2 中引入的一个新特性，它提供了一种更简洁的代码组织方式，可以让我们在单文件组件中更方便地使用 Composition API。<br>\n这种写法的主要优点是：</p>\n</blockquote>\n<ul>\n<li>不用写 setup 函数,不用写 return 语句。</li>\n<li>组件只需要引入不需要注册。</li>\n<li>不需要写组件名，自动根据文件名生成 name。</li>\n<li>可以更方便的逻辑分块。</li>\n</ul>\n<h3>4.1 基础用法</h3>",readingTime:{minutes:6.3,words:1889},title:"script setup写法",order:4,type:"article"}}],["/demojs/vue3/5.html",{loader:()=>a.e(9274).then(a.bind(a,5233)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","script setup"],excerpt:"\n<h2>1. Vue 2 与 Vue 3 生命周期对比</h2>\n<table>\n<thead>\n<tr>\n<th>Vue 2.x</th>\n<th>Vue 3.x</th>\n<th>执行时机</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate</td>\n<td>setup()</td>\n<td>组件实例被创建之前</td>\n<td>无法访问组件实例，较少使用</td>\n</tr>\n<tr>\n<td>created</td>\n<td>setup()</td>\n<td>组件实例创建完成</td>\n<td>可以访问响应式数据，适合异步数据获取</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n<td>组件挂载到 DOM 之前</td>\n<td>访问不到 DOM，适合最后的数据准备</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n<td>组件挂载到 DOM 之后</td>\n<td>可以访问 DOM，初始化第三方库，添加事件监听等</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n<td>组件更新之前</td>\n<td>可以获取更新前的 DOM 状态</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n<td>组件更新之后</td>\n<td>可以访问更新后的 DOM</td>\n</tr>\n<tr>\n<td>beforeDestroy</td>\n<td>onBeforeUnmount</td>\n<td>组件卸载之前</td>\n<td>清理定时器、事件监听器等</td>\n</tr>\n<tr>\n<td>destroyed</td>\n<td>onUnmounted</td>\n<td>组件卸载之后</td>\n<td>组件完全销毁后的清理工作</td>\n</tr>\n</tbody>\n</table>",readingTime:{minutes:2.82,words:847},title:"生命周期详解",order:5,type:"article"}}],["/demojs/vue3/6.html",{loader:()=>a.e(1779).then(a.bind(a,1875)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","script setup"],excerpt:'\n<blockquote>\n<p>以下 vue3 案例都是选项式 API 写法，组合式 api 写法见第 4 章。</p>\n</blockquote>\n<h2>6.1. Props 父传子</h2>\n<p>来看个简单的例子：</p>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 父组件 father.vue</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;我是父组件&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;!-- 通过 :属性名 的方式传递数据给子组件 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">son</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF"> :name="parentName"</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF"> :age="18"&gt;&lt;/son&gt;</span></span>\n<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF">&lt;/template&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF">&lt;script&gt;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">import</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> son</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'./son.vue\'</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">import</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> }</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "vue"</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">export</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  components</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 定义要传给子组件的数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    const </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">parentName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'老父亲\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    return { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">parentName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>\n<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF">&lt;/script&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.79,words:1438},title:"组件通信详解",order:6,type:"article"}}],["/demojs/vue3/7.html",{loader:()=>a.e(3676).then(a.bind(a,3654)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","script setup"],excerpt:"\n<h1>7.1 vue3 的 watch 监听</h1>\n<h3>7.1.1 监听一个值</h3>\n<p>Vue 3 的 watch 可以监听响应式数据的变化。需要注意以下几点：</p>\n<ul>\n<li>被监听的数据必须是响应式的（使用 <code>ref</code>、<code>reactive</code> 或 <code>computed</code> 创建）</li>\n<li>监听 <code>reactive</code> 对象的属性时，需要使用 getter 函数</li>\n<li>监听 <code>ref</code> 类型时可以直接传入变量名</li>\n</ul>\n<p>来看一个具体例子：</p>",readingTime:{minutes:2.84,words:851},title:"watch监听",order:7,type:"article"}}],["/demojs/vue3/8.html",{loader:()=>a.e(7725).then(a.bind(a,7469)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","pinia"],excerpt:'\n<h3>8.1 pinia 使用</h3>\n<p><a href="https://pinia.vuejs.org/zh/introduction.html" target="_blank" rel="noopener noreferrer">pinia 文档</a></p>\n<blockquote>\n<p>Pinia 是 Vue 3 的官方状态管理工具，是 Vuex 的升级版，提供更简单的 API 和更好的 TypeScript 支持。</p>\n</blockquote>\n<hr>\n<h5>8.1.1 <strong>安装 pinia</strong></h5>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># npm安装</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pinia</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -S</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># yarn安装</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pinia</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -S</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.27,words:1281},title:"pinia使用",order:8,type:"article"}}],["/demojs/vue3/9.html",{loader:()=>a.e(7798).then(a.bind(a,8662)),meta:{date:1752587769e3,category:["学习记录"],tag:["vue3","vue-router"],excerpt:'\n<h2>9.1 vue3 路由</h2>\n<h4>9.1.1 vue3 创建路由</h4>\n<blockquote>\n<p>路由就是在 SPA 单页面程序里，通过不同的地址卸载当前组件，挂载新的组件。</p>\n</blockquote>\n<ul>\n<li>安装路由<br>\n如果和 node 版本不兼容，就降级 vue-router</li>\n</ul>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vue-router</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -S</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:4.9,words:1470},title:"路由",order:9,type:"article"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,5732)),meta:{title:""}}],["/demoOther/",{loader:()=>a.e(642).then(a.bind(a,5238)),meta:{title:"Demo Other"}}],["/demoOther/TS%E5%BA%94%E7%94%A8/",{loader:()=>a.e(5398).then(a.bind(a,6467)),meta:{title:"TS应用"}}],["/demoOther/%E5%BE%85%E6%95%B4%E7%90%86/",{loader:()=>a.e(6700).then(a.bind(a,1079)),meta:{title:"待整理"}}],["/demojs/vue2/",{loader:()=>a.e(6586).then(a.bind(a,9338)),meta:{title:"Vue2"}}],["/demojs/vue3/",{loader:()=>a.e(801).then(a.bind(a,3746)),meta:{title:"Vue3"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,1409)),meta:{title:"分类",index:!1}}],["/category/typescript/",{loader:()=>a.e(1999).then(a.bind(a,3131)),meta:{title:"TypeScript 分类",index:!1}}],["/category/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/",{loader:()=>a.e(6609).then(a.bind(a,8497)),meta:{title:"前端技术 分类",index:!1}}],["/category/vue3/",{loader:()=>a.e(3077).then(a.bind(a,9337)),meta:{title:"Vue3 分类",index:!1}}],["/category/element-plus/",{loader:()=>a.e(5787).then(a.bind(a,3471)),meta:{title:"Element-Plus 分类",index:!1}}],["/category/js%E9%9D%A2%E8%AF%95%E9%A2%98/",{loader:()=>a.e(8634).then(a.bind(a,79)),meta:{title:"js面试题 分类",index:!1}}],["/category/vue3%E9%9D%A2%E8%AF%95%E9%A2%98/",{loader:()=>a.e(5760).then(a.bind(a,6488)),meta:{title:"vue3面试题 分类",index:!1}}],["/category/promise/",{loader:()=>a.e(77).then(a.bind(a,7576)),meta:{title:"Promise 分类",index:!1}}],["/category/%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/",{loader:()=>a.e(1255).then(a.bind(a,2958)),meta:{title:"面试常问 分类",index:!1}}],["/category/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",{loader:()=>a.e(8485).then(a.bind(a,6334)),meta:{title:"学习记录 分类",index:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,7770)),meta:{title:"标签",index:!1}}],["/tag/vue2/",{loader:()=>a.e(5300).then(a.bind(a,7156)),meta:{title:"标签: vue2",index:!1}}],["/tag/vue3/",{loader:()=>a.e(2579).then(a.bind(a,2652)),meta:{title:"标签: vue3",index:!1}}],["/tag/element-plus/",{loader:()=>a.e(2377).then(a.bind(a,6903)),meta:{title:"标签: Element-plus",index:!1}}],["/tag/vue-router/",{loader:()=>a.e(4720).then(a.bind(a,783)),meta:{title:"标签: vue-router",index:!1}}],["/tag/vuex/",{loader:()=>a.e(4658).then(a.bind(a,2644)),meta:{title:"标签: vuex",index:!1}}],["/tag/pinia/",{loader:()=>a.e(5307).then(a.bind(a,5517)),meta:{title:"标签: pinia",index:!1}}],["/tag/slot/",{loader:()=>a.e(6550).then(a.bind(a,2161)),meta:{title:"标签: slot",index:!1}}],["/tag/plugin/",{loader:()=>a.e(3769).then(a.bind(a,6420)),meta:{title:"标签: plugin",index:!1}}],["/tag/axios/",{loader:()=>a.e(5352).then(a.bind(a,830)),meta:{title:"标签: axios",index:!1}}],["/tag/alova/",{loader:()=>a.e(3273).then(a.bind(a,7429)),meta:{title:"标签: alova",index:!1}}],["/tag/websocket/",{loader:()=>a.e(3421).then(a.bind(a,3542)),meta:{title:"标签: WebSocket",index:!1}}],["/tag/beforeeach/",{loader:()=>a.e(3176).then(a.bind(a,4462)),meta:{title:"标签: beforeEach",index:!1}}],["/tag/%E8%B7%A8%E5%9F%9F/",{loader:()=>a.e(8479).then(a.bind(a,9428)),meta:{title:"标签: 跨域",index:!1}}],["/tag/webpack/",{loader:()=>a.e(7997).then(a.bind(a,6279)),meta:{title:"标签: webpack",index:!1}}],["/tag/vite/",{loader:()=>a.e(6892).then(a.bind(a,530)),meta:{title:"标签: vite",index:!1}}],["/tag/element-ui/",{loader:()=>a.e(2383).then(a.bind(a,2541)),meta:{title:"标签: Element-ui",index:!1}}],["/tag/echarts/",{loader:()=>a.e(1420).then(a.bind(a,5386)),meta:{title:"标签: Echarts",index:!1}}],["/tag/ref/",{loader:()=>a.e(3703).then(a.bind(a,2013)),meta:{title:"标签: ref",index:!1}}],["/tag/reactive/",{loader:()=>a.e(4129).then(a.bind(a,2581)),meta:{title:"标签: reactive",index:!1}}],["/tag/computed/",{loader:()=>a.e(829).then(a.bind(a,3988)),meta:{title:"标签: computed",index:!1}}],["/tag/script-setup/",{loader:()=>a.e(389).then(a.bind(a,1829)),meta:{title:"标签: script setup",index:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,3059)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,1965)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,95)),meta:{title:"时间轴",index:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"base":"/blog/","lang":"zh-CN","title":"小铭同学","description":"小铭同学的博客","head":[],"locales":{}}')}},i=>{i.O(0,[6531,2246],()=>i(i.s=116)),i.O()}]);